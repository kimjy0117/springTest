name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1️⃣ Git 저장소 체크아웃
      - uses: actions/checkout@v3

      # 2️⃣ JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Gradle 캐싱 (빌드 시간 단축)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4️⃣ Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5️⃣ Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 6️⃣ GitHub Secrets에서 Base64 인코딩된 .env 파일 디코딩하여 생성
      - name: Decode .env file
        run: |
          echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 --decode > .env

      # 7️⃣ Docker Hub 로그인
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8️⃣ Docker Compose 빌드 & 푸시 (이미지를 자동으로 빌드하고 Docker Hub에 푸시)
      - name: Build & Push Docker Images
        run: |
          docker compose build
          docker tag my-image:latest ${{ secrets.DOCKER_USERNAME }}/spring-docker-test:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-docker-test:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 9️⃣ 서버에 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }} # EC2 퍼블릭 IP
          username: ${{ secrets.USERNAME }}   # 홈서버 SSH 계정 (ex: ubuntu)
          key: ${{ secrets.PRIVATE_KEY }}     # SSH 개인 키
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-docker-test:latest
            sudo docker rm -f my-container || true
            sudo docker run -d --name my-container -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/spring-docker-test:latest
            sudo docker image prune -f
