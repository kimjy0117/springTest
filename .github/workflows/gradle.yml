name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

        ## gradle caching (빌드 시간 줄이기)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

        # gradle chmod
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew


        # gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # GitHub Secrets에서 Base64 인코딩된 .env 파일을 디코딩하여 .env 파일 생성
      - name: Decode .env file
        run: |
         echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 --decode > .env

      - name: Docker Compose Build
        run: |
          docker compose up -d --build

        # docker login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

        # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/spring-docker-test .
          docker push ${{ secrets.DOCKER_REPO }}/spring-docker-test

        ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.SERVER_IP }} # EC2 퍼블릭 IPv4 DNS
          username: ${{ secrets.USERNAME }}   # 홈서버 SSH 계정 (ex: ubuntu)
          #key: ${{ secrets.PRIVATE_KEY }}     # SSH 개인 키
          password: ${{ secrets.PASSWORD }}     # SSH 비밀번호
          script: |
            sudo docker ps
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/spring-docker-test
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/spring-docker-test
            sudo docker image prune -f
